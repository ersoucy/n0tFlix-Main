<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngleSharp.Io</name>
    </assembly>
    <members>
        <member name="T:AngleSharp.Io.Cookie.AdvancedCookieProvider">
            <summary>
            Represents an advanced cookie provider that allows
            persistence, snapshots, and more.
            Stores the cookies in the Netscape compatible file
            format.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.#ctor(AngleSharp.Io.Cookie.ICookieFileHandler,AngleSharp.Io.Cookie.AdvancedCookieProviderOptions)">
            <summary>
            Creates a new cookie provider with the given handler and options.
            </summary>
            <param name="handler">The handler responsible for file system interaction.</param>
            <param name="options">The options to use for the cookie provider.</param>
        </member>
        <member name="P:AngleSharp.Io.Cookie.AdvancedCookieProvider.Cookies">
            <summary>
            Gets the available cookies.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.FindCookie(System.String,System.String,System.String)">
            <summary>
            Gets the cookie with the given key.
            </summary>
            <param name="domain">The domain of the cookie.</param>
            <param name="path">The path of the cookie.</param>
            <param name="key">The key of the cookie.</param>
            <returns>If matching cookie, if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.FindCookies(System.String,System.String)">
            <summary>
            Finds all cookies that match the given domain and optional path.
            </summary>
            <param name="domain">The domain to look for.</param>
            <param name="path">The optional path of the cookie.</param>
            <returns>The matching cookies.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.AddCookie(AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Adds a new cookie to the collection.
            </summary>
            <param name="cookie">The cookie to add.</param>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.UpdateCookie(AngleSharp.Io.Cookie.WebCookie,AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Updates an existing cookie with a new cookie.
            </summary>
            <param name="oldCookie">The cookie to update.</param>
            <param name="newCookie">The updated cookie content.</param>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.RemoveCookie(System.String,System.String,System.String)">
            <summary>
            Removes a specific cookie matched by its domain, path, and key.
            </summary>
            <param name="domain">The domain to look for.</param>
            <param name="path">The path to look for.</param>
            <param name="key">The key of the cookie.</param>
            <returns>The removed cookie if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.RemoveCookies(System.String,System.String)">
            <summary>
            Removes the cookies found for the provided domain and path.
            </summary>
            <param name="domain">The domain to look for.</param>
            <param name="path">The optional path to match.</param>
            <returns>The removed cookies.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.AdvancedCookieProvider.RemoveAllCookies">
            <summary>
            Removes all currently available cookies.
            </summary>
            <returns>The removed cookies.</returns>
        </member>
        <member name="T:AngleSharp.Io.Cookie.AdvancedCookieProviderOptions">
            <summary>
            Options for the AdvancedCookieProvider.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.AdvancedCookieProviderOptions.IsForceParse">
            <summary>
            Gets or sets if parsing is forced. If true, errors
            will be suppressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.AdvancedCookieProviderOptions.IsHttpOnlyExtension">
            <summary>
            Gets or sets if http only declarations should be
            allowed.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Cookie.ICookieFileHandler">
            <summary>
            Represents a file handler.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.ICookieFileHandler.ReadFile">
            <summary>
            Reads the (text) content from the file.
            </summary>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.ICookieFileHandler.WriteFile(System.String)">
            <summary>
            Writes the (text) content to the file.
            </summary>
            <param name="content">The content to write.</param>
        </member>
        <member name="T:AngleSharp.Io.Cookie.LocalFileHandler">
            <summary>
            Represents a file handler against the local
            file system.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.LocalFileHandler.#ctor(System.String)">
            <summary>
            Creates a new local file handler for the given path.
            </summary>
            <param name="filePath">The path to resolve to.</param>
        </member>
        <member name="T:AngleSharp.Io.Cookie.MemoryFileHandler">
            <summary>
            A memory file handler to feed the cookie provider.
            Ideal for testing and sandboxed ("private") browsing.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.MemoryFileHandler.#ctor(System.String)">
            <summary>
            Creates a new memory file handler.
            If no initial content is provided the handler starts empty.
            </summary>
            <param name="initialContent">The optional initial content.</param>
        </member>
        <member name="T:AngleSharp.Io.Cookie.WebCookie">
            <summary>
            Represents a parsed web cookie.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookie.FromString(System.String,System.Boolean)">
            <summary>
            Parses the provided string to produce a new web cookie.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="loose">Optionally makes parsing less strict.</param>
            <returns>The created web cookie.</returns>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Domain">
            <summary>
            Gets the associated domain of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.CanonicalDomain">
            <summary>
            Gets the computed canonical domain of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Path">
            <summary>
            Gets the path of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.IsSecure">
            <summary>
            Gets if the cookie is a secure cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Expires">
            <summary>
            Gets the expiration date of the cookie, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.MaxAge">
            <summary>
            Gets the maximum age, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.IsPersistent">
            <summary>
            Gets if the cookie should be stored on the file system.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.IsHttpOnly">
            <summary>
            Gets the transport only property of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.IsHostOnly">
            <summary>
            Gets the host only property of the cookie, if set.
            According to S5.2.6 effectively the same as 'IsSecure'.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.TimeToLive">
            <summary>
            Gets the time to live for the current time.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Key">
            <summary>
            Gets the key of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Value">
            <summary>
            Gets the value of the cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Cookie.WebCookie.Extensions">
            <summary>
            Gets the available extensions for the cookie.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookie.ComputeTimeToLive(System.DateTime)">
            <summary>
            Computes the time to live.
            For reference, see RFC6265 S4.1.2.2.
            </summary>
            <param name="now">The reference time.</param>
            <returns>The time to live if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookie.ComputeExpiration(System.DateTime)">
            <summary>
            Computes the expiration time relative to the provided now.
            </summary>
            <param name="now">The reference time.</param>
            <returns>The expiration time.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookie.CompareTo(AngleSharp.Io.Cookie.WebCookie)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookie.Equals(AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Checks if the current WebCookie is equal to the provided one.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if both are value-wise equal, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Cookie.WebCookieExtensions">
            <summary>
            A collection of extensions for the WebCookie class.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookieExtensions.ToSetCookie(AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Serializes the cookie to the set-cookie format.
            </summary>
            <param name="cookie">The cookie to serialize.</param>
            <returns>A string used in the HTTP set-cookie header.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookieExtensions.ToGetCookie(AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Serializes the cookie to the standard HTTP cookie format.
            </summary>
            <param name="cookie">The cookie to serialize.</param>
            <returns>A string used in the HTTP cookie header.</returns>
        </member>
        <member name="M:AngleSharp.Io.Cookie.WebCookieExtensions.Validate(AngleSharp.Io.Cookie.WebCookie)">
            <summary>
            Validates the given cookie against invalid values.
            </summary>
            <param name="cookie">The cookie to validate.</param>
            <returns>True if the cookie is valid, false otherwise.</returns>
        </member>
        <member name="T:AngleSharp.Io.Dom.ElementExtensions">
            <summary>
            Extensions for DOM elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.ElementExtensions.AppendFile``1(``0,AngleSharp.Io.Dom.InputFile)">
            <summary>
            Appends a file to the input element.
            Requires the input element to be of type "file".
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="input">The input to append to.</param>
            <param name="file">The file to append.</param>
            <returns>The input itself for chaining.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.ElementExtensions.AppendFile``1(``0,System.String)">
            <summary>
            Appends a file to the input element.
            Requires the input element to be of type "file".
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="input">The input to append to.</param>
            <param name="filePath">The path to the file, which should be appended.</param>
            <returns>The input itself for chaining.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.ElementExtensions.AppendFile``1(``0,System.String,System.IO.Stream,System.String)">
            <summary>
            Appends a file to the input element.
            Requires the input element to be of type "file".
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="input">The input to append to.</param>
            <param name="fileName">The name to the file, which should be appended.</param>
            <param name="content">The content to the file, which should be appended.</param>
            <param name="mimeType">
            The MIME type of the file, which should be appended.
            If not given the default value is maps to an unknown binary (octet stream).
            </param>
            <returns>The input itself for chaining.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.ElementExtensions.DownloadAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Downloads the content from to the hyper reference given by the provided
            element.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="element">The element referencing the link to follow.</param>
            <param name="cancellationToken">The token to cancel the download.</param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="T:AngleSharp.Io.Dom.InputFile">
            <summary>
            Represents an input file
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.#ctor(System.String,System.String,System.IO.Stream,System.DateTime)">
            <summary>
            Creates a new input file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="type">The MIME type of the file.</param>
            <param name="content">The content stream.</param>
            <param name="modified">The last modified date.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            Creates a new input file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="type">The MIME type of the file.</param>
            <param name="content">The content stream.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Creates a new input file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="type">The MIME type of the file.</param>
            <param name="content">The content stream.</param>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.Body">
            <summary>
            Gets the content stream.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.IsClosed">
            <summary>
            Gets if the input stream is closed.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.LastModified">
            <summary>
            Gets the last modified date.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.Length">
            <summary>
            Gets the length of the content stream.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.InputFile.Type">
            <summary>
            Gets the MIME type of the file.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.Close">
            <summary>
            Closes the content stream.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.System#IDisposable#Dispose">
            <summary>
            Disposes the content stream.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.InputFile.Slice(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Io.Dom.WebSocket">
            <summary>
            Represents the WebSocket interface. For more information see:
            http://www.w3.org/TR/2011/WD-websockets-20110419/#the-websocket-interface
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocket.OpenEvent">
            <summary>
            The open event name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocket.CloseEvent">
            <summary>
            The close event name.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Opened">
            <summary>
            Adds or removes the handler for the open event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Message">
            <summary>
            Adds or removes the handler for the message event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Error">
            <summary>
            Adds or removes the handler for the error event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Closed">
            <summary>
            Adds or removes the handler for the close event.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.#ctor(AngleSharp.Dom.IWindow,System.String,System.String[])">
            <summary>
            Creates a new WebSocket instance.
            </summary>
            <param name="window">The parent context.</param>
            <param name="url">The URL to connect to.</param>
            <param name="protocols">The protocols to allow.</param>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Url">
            <summary>
            Gets the URL the connection is made to.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.ReadyState">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Buffered">
            <summary>
            Gets the number of bytes of UTF-8 text that have been queued using
            Send() but that, as of the last time the event loop started
            executing a task, had not yet been transmitted to the network.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Protocol">
            <summary>
            Gets the chosen protocol for the connection.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.Send(System.String)">
            <summary>
            Transmits data using the connection.
            </summary>
            <param name="data">The data to transmit.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.Close">
            <summary>
            Closes the WebSocket connection, if open. Otherwise aborts.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.WebSocketReadyState">
            <summary>
            Represents the state of the connection.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Connecting">
            <summary>
            The connection has not yet been established.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Open">
            <summary>
            The connection is established and communication is possible.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Closing">
            <summary>
            The connection is going through the closing handshake.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Closed">
            <summary>
            The connection has been closed or could not be opened.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.IStorage">
            <summary>
            Represents the Storage interface. For more information see:
            http://www.w3.org/TR/webstorage/#the-storage-interface
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IStorage.Length">
            <summary>
            Gets the number of stored keys.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Key(System.Int32)">
            <summary>
            Gets the key at the given index, if any.
            </summary>
            <param name="index">The index of the key.</param>
            <returns>The key or null.</returns>
        </member>
        <member name="P:AngleSharp.Io.Dom.IStorage.Item(System.String)">
            <summary>
            Gets or sets the item's value.
            </summary>
            <param name="key">The key of the item.</param>
            <returns>The value if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Remove(System.String)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Clear">
            <summary>
            Clears all items from the storage.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.GeneralExtensions">
            <summary>
            Some general extension methods.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.GeneralExtensions.Stringify(AngleSharp.Io.HttpMethod)">
            <summary>
            Returns the string representation for the specified HTTP method.
            </summary>
            <param name="method">The type of HTTP method to stringify.</param>
            <returns>The string representing the HTTP method.</returns>
        </member>
        <member name="M:AngleSharp.Io.GeneralExtensions.Forget(System.Threading.Tasks.Task)">
            <summary>
            Forgets the given task. Exceptions are ignored and continuations
            are pointless.
            </summary>
            <param name="task">The task to forget after firing.</param>
        </member>
        <member name="T:AngleSharp.Io.Network.AboutRequester">
            <summary>
            Requester to perform about:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.#ctor">
            <summary>
            Creates a new about requester.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.SetRoute(System.String,System.Func{AngleSharp.Io.Request,System.Threading.CancellationToken,System.Threading.Tasks.Task{AngleSharp.Io.IResponse}})">
            <summary>
            Sets the route for the given address.
            </summary>
            <param name="address">The address of the route.</param>
            <param name="route">The route to use.</param>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.GetRoute(System.String)">
            <summary>
            Gets the route for the given address, if any.
            </summary>
            <param name="address">The address of the route to obtain.</param>
            <returns>The route, if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. file.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.CookieFieldNames">
            <summary>
            A collection of constants found in a cookie.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Comment">
            <summary>
            The Comment attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.CommentUrl">
            <summary>
            The CommentURL attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Discard">
            <summary>
            The Discard attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Domain">
            <summary>
            The Domain attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Expires">
            <summary>
            The Expires attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.MaxAge">
            <summary>
            The Max-Age attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Path">
            <summary>
            The Path attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Port">
            <summary>
            The Port attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Secure">
            <summary>
            The Secure attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.Version">
            <summary>
            The Version attribute name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Network.CookieFieldNames.HttpOnly">
            <summary>
            The HttpOnly attribute name.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Network.DataRequester">
            <summary>
            The default (ready-to-use) data scheme requester.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.DataRequester.SupportsProtocol(System.String)">
            <summary>Checks if the data protocol is given.</summary>
            <param name="protocol">The protocol to check for data.</param>
            <returns>True if data is matched, otherwise false..</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.DataRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.Network.FileRequester">
            <summary>
            Requester to perform file:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.FileRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.FileRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. file.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.FtpRequester">
            <summary>
            Requester to perform ftp:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.FtpRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.FtpRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. ftp.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.HttpClientRequester">
            <summary>
            An HTTP requester based on <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.#ctor">
            <summary>
            Creates a new HTTP client request with a new HttpClient instance.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Creates a new HTTP client request.
            </summary>
            <param name="client">The HTTP client to use for requests.</param>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">
            The protocol to check for, e.g., http.
            </param>
            <returns>
            True if the protocol is supported, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.Network.ResponseExtensions">
            <summary>
            A set of useful extension methods for an IResponse.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.ResponseExtensions.SaveToAsync(AngleSharp.Io.IResponse,System.String)">
            <summary>
            Saves the given response to the given file path.
            Disposes the response after saving has finished.
            </summary>
            <param name="response">The response to use.</param>
            <param name="filePath">The path where the response should be saved.</param>
            <returns>The task storing the file.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.ResponseExtensions.CopyToAsync(AngleSharp.Io.IResponse,System.IO.Stream)">
            <summary>
            Copies the given response to the provided stream.
            Disposes the response after saving has finished.
            </summary>
            <param name="response">The response to use.</param>
            <param name="stream">The stream where the response should be copied to.</param>
            <returns>The task copying to the stream.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.ResponseExtensions.IsAttachment(AngleSharp.Io.IResponse)">
            <summary>
            Determines if the given response is provided as an attachment.
            </summary>
            <param name="response">The response to extend.</param>
            <returns>True if the content-disposition is attachment, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.ResponseExtensions.GetAttachedFileName(AngleSharp.Io.IResponse)">
            <summary>
            Gets the filename of the content-disposition header or
            alternatively via a path analysis together with the MIME type.
            </summary>
            <param name="response">The response to extend.</param>
            <returns>The determined file name.</returns>
        </member>
        <member name="T:AngleSharp.IoConfigurationExtensions">
            <summary>
            Additional extensions for improved requesters.
            </summary>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithDownload(AngleSharp.IConfiguration,System.Func{AngleSharp.Io.MimeType,AngleSharp.Io.IResponse,System.Boolean})">
            <summary>
            Adds capability to start a download when following some link to the
            configuration.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="download">
            The callback to invoke when a download should be started. Returns true
            to signal an interest in downloading the response, otherwise false.
            </param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithStandardDownload(AngleSharp.IConfiguration,System.Action{System.String,System.IO.Stream})">
            <summary>
            Adds the standard download capability, i.e., when a binary or attachment
            is received the download callback is triggered.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="download">
            The callback with filename and stream as parameters. The stream must be
            disposed / cleaned up after use.
            </param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequesters(AngleSharp.IConfiguration)">
            <summary>
            Adds the requesters from the AngleSharp.Io package.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequesters(AngleSharp.IConfiguration,System.Net.Http.HttpClientHandler)">
            <summary>
            Adds the requesters from the AngleSharp.Io package.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="httpClientHandler">
            The HTTP client handler to use for sending requests.
            </param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequesters(AngleSharp.IConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            Adds the requesters from the AngleSharp.Io package.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="httpMessageHandler">
            The HTTP message handler to use for sending requests.
            </param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequester``1(AngleSharp.IConfiguration,``0)">
            <summary>
            Adds the given requester to the configuration.
            </summary>
            <typeparam name="T">The type of the requester to add.</typeparam>
            <param name="configuration">The configuration to use.</param>
            <param name="requester">The requester instance to add.</param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequester``1(AngleSharp.IConfiguration)">
            <summary>
            Adds a new requester of the provided type to the configuration.
            </summary>
            <typeparam name="T">The type of the requester to add.</typeparam>
            <param name="configuration">The configuration to use.</param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithPersistentCookies(AngleSharp.IConfiguration,System.String)">
            <summary>
            Registers a persistent advanced cookie container using the local file handler.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="syncFilePath">The path to the required sync file.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithTemporaryCookies(AngleSharp.IConfiguration)">
            <summary>
            Registers a non-persistent advanced cookie container using the memory-only file
            handler.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithCookies(AngleSharp.IConfiguration)">
            <summary>
            Registers a non-persistent advanced cookie container using the memory-only file
            handler.
            Alias for WithTemporaryCookies().
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithCookies(AngleSharp.IConfiguration,AngleSharp.Io.Cookie.ICookieFileHandler)">
            <summary>
            Registers the advanced cookie service.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="fileHandler">The handler for the cookie source.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithCookies(AngleSharp.IConfiguration,AngleSharp.Io.ICookieProvider)">
            <summary>
            Registers a cookie service with the given provider.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="provider">The provider for cookie interactions.</param>
            <returns>The new instance with the service.</returns>
        </member>
    </members>
</doc>
